create database eccomerce;
use eccomerce;

create table client(
    idClient int auto_increment primary key,
    Fname varchar(10),
    Minit char(3),
    Lname varchar(20),
    CPF char(11) not null,
    Address varchar(30),
    constraint unique_cpf_client unique (CPF)
);

alter table client auto_increment=1;

create table product(
    idProduct int auto_increment primary key,
    Pname varchar(10),
    classification_kids bool,
    category enum('Eletrônico','Vestimenta','Brinquedos','Alimetos','Móveis') not null,
    avaliation float default 0,
    size varchar(10)
);

create table payment(
    idclient int,
    idPayment int,
    typePayment enum('Boleto','Cartão','Dois cartões'),
    limitAvailable float,
    primary key(idClient, id_payment)
);

create table orders(
    idOrder int auto_increment primary key,
    idOrderClient int,
    orderStatus enum('Cancelado', 'Confirmado', 'Em processamento') default 'Em processamento',
    orderDescription varchar(255),
    sendValue float default 10,
    paymentCash bool default false,
    constraint fk_orders_client foreign key (idOrderClient) references client(idClient)
);

-- idPayment null

create table productStorage(
    idProdStorage int auto_increment primary key,
    storageLocation varchar(255),
    quantity int default 0
);

create table supplier(
    idSupplier int auto_increment primary key,
    SocialName varchar(255) not null,
    CNPJ char(15) not null,
    contact char(11) not null,
    constraint unique_supplier unique (CNPJ)
);

create table seller(
    idSeller int auto_increment primary key,
    SocialName varchar(255) not null,
    AbstName varchar(255),
    CNPJ char(15),
    CPF char(9),
    location varchar(255),
    contact char(11) not null,
    constraint unique_cnpj_seller unique (CNPJ),
    constraint unique_cpf_seller unique (CPF)
);

create table productSeller(
    idPseller int,
    idPproduct int,
    prodQuantity int default 1,
    primary key(idPseller, idPproduct),
    constraint fk_product_seller foreign key (idPseller) references seller(idSeller),
    constraint fk_product_product foreign key (idPproduct) references product(idProduct)
);


create table productOrder(
    idPOproduct int,
    idPOorder int,
    poQuantity int default 1,
    poStatus enum('Disponível', 'Sem estoque') default 'Disponível',
    primary key(idPOproduct, idPOorder),
    constraint fk_product_order_seller foreign key (idPOproduct) references product(idProduct),
    constraint fk_product_order_product foreign key (idPOorder) references orders(idOrder)
);

create table storageLocation(
    idLproduct int,
    idLstorage int,
    location varchar(255) not null,
    primary key(idLproduct, idLstorage),
    constraint fk_storage_location_product foreign key (idLproduct) references product(idProduct),
    constraint fk_storage_location_storage foreign key (idLstorage) references productStorage(idProdStorage)
);

create table productSupplier(
    idPsSupplier int,
    idPsProduct int,
    quantity int not null,
    primary key(idPsSupplier, idPsProduct),
    constraint fk_product_supplier_supplier foreign key (idPsSupplier) references supplier(idSupplier),
    constraint fk_product_supplier_product foreign key (idPsProduct) references product(idProduct)
);


-- INSERÇÃO

-- Inserir clientes
INSERT INTO client (Fname, Minit, Lname, CPF, Address)
VALUES
    ('João', 'A', 'Silva', '12345678901', 'Rua A, 123'),
    ('Maria', 'B', 'Santos', '23456789012', 'Avenida B, 456'),
    ('Pedro', 'C', 'Oliveira', '34567890123', 'Travessa C, 789');

-- Inserir produtos
INSERT INTO product (Pname, classification_kids, category, avaliation, size)
VALUES
    ('Smartphone', 0, 'Eletrônico', 4.5, '5.5 inch'),
    ('Camiseta', 1, 'Vestimenta', 4.0, 'M'),
    ('Brinquedo', 1, 'Brinquedos', 4.8, 'N/A'),
    ('Arroz', 0, 'Alimentos', 4.9, '1kg'),
    ('Sofá', 0, 'Móveis', 4.7, '3-seater');

-- Inserir pedidos
INSERT INTO orders (idOrderClient, orderDescription, sendValue, paymentCash)
VALUES
    (1, 'Pedido 1', 20.5, 0),
    (2, 'Pedido 2', 15.0, 1),
    (3, 'Pedido 3', 10.0, 0);

-- Inserir localizações de estoque
INSERT INTO productStorage (storageLocation, quantity)
VALUES
    ('Prateleira 1', 50),
    ('Prateleira 2', 30),
    ('Estoque Principal', 100);

-- Inserir fornecedores
INSERT INTO supplier (SocialName, CNPJ, contact)
VALUES
    ('Fornecedor A', '12345678901234', '1122334455'),
    ('Fornecedor B', '23456789012345', '2233445566'),
    ('Fornecedor C', '34567890123456', '3344556677');

-- Inserir vendedores
INSERT INTO seller (SocialName, AbstName, CNPJ, CPF, location, contact)
VALUES
    ('Vendedor X', 'VX', '12345678901', '123456789', 'Loja X', '9988776655'),
    ('Vendedor Y', 'VY', '23456789012', '234567890', 'Loja Y', '8877665544'),
    ('Vendedor Z', 'VZ', '34567890123', '345678901', 'Loja Z', '7766554433');

-- Inserir relação entre produtos e vendedores
INSERT INTO productSeller (idPseller, idPproduct, prodQuantity)
VALUES
    (1, 1, 10),
    (2, 2, 20),
    (3, 3, 15);

-- Inserir relação entre produtos e pedidos
INSERT INTO productOrder (idPOproduct, idPOorder, poQuantity)
VALUES
    (1, 1, 5),
    (2, 1, 3),
    (3, 2, 2);

-- Inserir relação entre produtos e locais de estoque
INSERT INTO storageLocation (idLproduct, idLstorage, location)
VALUES
    (1, 1, 'Prateleira 1'),
    (2, 2, 'Prateleira 2'),
    (3, 3, 'Estoque Principal');

-- Inserir relação entre produtos e fornecedores
INSERT INTO productSupplier (idPsSupplier, idPsProduct, quantity)
VALUES
    (1, 1, 100),
    (2, 2, 50),
    (3, 3, 200);
